/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/rgb.h>

#define HYPER LC(LS(LG(LALT)))

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2
#define FACTORY_TEST 3

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 0>, <&to 0>;
        };

        magic: magic_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };

        tlb: toggle_layer_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "TOGLE_LAYER_BALANCED";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            bindings = <&mo>, <&kp>;
        };

        thb: tap_hold_balanced {
            compatible = "zmk,behavior-hold-tap";
            label = "THB";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
        };
    };

    macros {
        rgb_ug_status_macro: rgb_ug_status_macro_0 {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&rgb_ug RGB_STATUS>;
        };

        bt_0: bt_profile_macro_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };

        slack_macro1: slack_macro1 {
            compatible = "zmk,behavior-macro";
            label = "slack_macrooo";
            #binding-cells = <0>;
            bindings =
                <&macro_tap &kp RC(RG(I))>, <&macro_wait_time 200>, <&macro_tap &kp RG(K)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&kp F1           &kp F2    &kp F3     &kp F4          &kp F5                                                                                                    &kp F6     &kp F7             &kp F8             &kp F9     &kp F10
&kp C_VOLUME_UP  &kp N1    &kp N2     &kp UP_ARROW    &kp N4     &kp N5                                                                                 &kp N6  &kp N7     &kp N8             &kp DOWN           &kp N0     &kp MINUS
&kp TAB          &kp Q     &kp W      &kp L           &kp P      &kp B                                                                                  &kp J   &kp F      &kp U              &kp Y              &kp P      &kp BSLH
&kp ESC          &kp A     &kp R      &kp S           &kp T      &kp G                                                                                  &kp M   &tlb 5 N   &tlb 0 E           &kp I              &kp O      &kp SQT
&kp GRAVE        &kp Z     &kp V      &tlb 0 C        &kp D      &kp X   &kp LSHFT  &kp LCTRL    &layer_td  &kp LGUI  &kp RCTRL  &kp RSHFT              &kp Q   &kp H      &tlb 0 ESCAPE      &kp KP_DOT         &kp K      &kp PG_UP
&magic 5 0       &kp HOME  &kp LG(E)  &kp LEFT_ARROW  &kp RIGHT          &kp BSPC   &kp PAGE_UP  &kp LGUI   &kp RALT  &kp RET    &thb LEFT_SHIFT SPACE          &kp COMMA  &kp LA(BACKSPACE)  &kp LG(BACKSPACE)  &kp COMMA  &kp ENTER
            >;
        };

        characters {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp MINUS &kp DOLLAR &kp UNDER &kp PLUS                                                 &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp QUESTION &kp SLASH  &kp KP_EQUAL &kp DOUBLE_QUOTES  &kp SINGLE_QUOTE                        &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp EXCLAMATION  &kp COLON  &kp SEMICOLON &kp GRAVE &kp PERCENT &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans   &kp LS(LA(LEFT_ARROW))  &kp LS(LA(RIGHT))  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        character_2 {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp AMPERSAND    &kp AT_SIGN        &kp TILDE   &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &kp BACKSLASH  &kp LEFT_BRACE   &kp LEFT_BRACKET   &kp LEFT_PARENTHESIS  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp RIGHT_BRACE  &kp RIGHT_BRACKET  &kp RIGHT_PARENTHESIS  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        keypad-new {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N7           &kp N8              &kp N9  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N4           &kp N5              &kp N6  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp N1  &kp N2              &kp N3  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &kp LA(LEFT_ARROW)  &kp LA(RIGHT_ARROW)          &kp LG(BACKSPACE)  &kp KP_NUMBER_0  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        c-layer {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &trans         &kp RC(RG(F))  &kp RC(RG(U))      &kp RC(RG(Y))    &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                  &kp RC(RG(M))  &kp RC(RG(N))  &kp RC(RG(E))      &slack_macro1     &kp RC(RG(O))  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans         &kp RG(RC(H))  &kp LC(LG(LS(C)))  &kp RC(RG(DOT))  &kp RC(RG(K))  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };

        magic_layer {
            bindings = <
&bt BT_CLR   &none            &none            &none            &none                                                                                     &none  &none  &none  &none  &bt BT_CLR_ALL
&none        &none            &none            &none            &none            &none                                                             &none  &none  &none  &none  &none  &none
&none        &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none  &none  &none  &none  &none  &none
&bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none  &none  &none  &none  &none  &bootloader
&sys_reset   &none            &none            &none            &none            &none            &bt_2  &bt_3  &none         &none  &none  &none  &none  &none  &none  &none  &none  &sys_reset
&none        &none            &none            &none            &none                             &bt_0  &bt_1  &out OUT_USB  &none  &none  &none         &none  &none  &none  &none  &to 0
            >;
        };
    };
};
